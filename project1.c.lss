
project1.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  0000044e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000750  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000e7  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000d78  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079e  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000214  00000000  00000000  00001596  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000458  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000111  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000448  00000000  00000000  00001de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000222d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3d       	cpi	r26, 0xD8	; 216
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 ed       	ldi	r26, 0xD8	; 216
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3d       	cpi	r26, 0xD8	; 216
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 84 00 	call	0x108	; 0x108 <main>
  8a:	0c 94 25 02 	jmp	0x44a	; 0x44a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <cmd>:



   void cmd (unsigned char a)
   {
	   PORTC=a;
  92:	85 bb       	out	0x15, r24	; 21
	   PORTA&=(~(1<<4));
  94:	dc 98       	cbi	0x1b, 4	; 27
	   PORTA|=(1<<6);
  96:	de 9a       	sbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	8f e0       	ldi	r24, 0x0F	; 15
  9a:	97 e2       	ldi	r25, 0x27	; 39
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <cmd+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <cmd+0x10>
  a2:	00 00       	nop
	   _delay_ms(5);
	   PORTA&=(~(1<<6));
  a4:	de 98       	cbi	0x1b, 6	; 27
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	97 e2       	ldi	r25, 0x27	; 39
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <cmd+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <cmd+0x1e>
  b0:	00 00       	nop
	   _delay_ms(5);
	      
   }
  b2:	08 95       	ret

000000b4 <data>:
   
   void data (unsigned char b)
   {
	   
	   PORTC=b;
  b4:	85 bb       	out	0x15, r24	; 21
	   PORTA|=(1<<4);
  b6:	dc 9a       	sbi	0x1b, 4	; 27
	   PORTA|=(1<<6);
  b8:	de 9a       	sbi	0x1b, 6	; 27
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	97 e2       	ldi	r25, 0x27	; 39
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <data+0xa>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <data+0x10>
  c4:	00 00       	nop
	   _delay_ms(5);
	   PORTA&=(~(1<<6));
  c6:	de 98       	cbi	0x1b, 6	; 27
  c8:	8f e0       	ldi	r24, 0x0F	; 15
  ca:	97 e2       	ldi	r25, 0x27	; 39
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <data+0x18>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <data+0x1e>
  d2:	00 00       	nop
	   _delay_ms(5);
	   
   }
  d4:	08 95       	ret

000000d6 <init>:
   
   void init (void)
   {
	   cmd(0x38);
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
	   cmd(0x0e);
  dc:	8e e0       	ldi	r24, 0x0E	; 14
  de:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
	   cmd(0x06);
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
	   
   }
  e8:	08 95       	ret

000000ea <str>:
   
   void str (unsigned char *ptr)
   {
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	ec 01       	movw	r28, r24
	  while(*ptr)
  f0:	88 81       	ld	r24, Y
  f2:	88 23       	and	r24, r24
  f4:	31 f0       	breq	.+12     	; 0x102 <str+0x18>
	   cmd(0x0e);
	   cmd(0x06);
	   
   }
   
   void str (unsigned char *ptr)
  f6:	21 96       	adiw	r28, 0x01	; 1
   {
	  while(*ptr)
		  data(*ptr++);   
  f8:	0e 94 5a 00 	call	0xb4	; 0xb4 <data>
	   
   }
   
   void str (unsigned char *ptr)
   {
	  while(*ptr)
  fc:	89 91       	ld	r24, Y+
  fe:	88 23       	and	r24, r24
 100:	d9 f7       	brne	.-10     	; 0xf8 <str+0xe>
		  data(*ptr++);   
	   
   }
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <main>:
   
   int main(void)
   {
 108:	2f 92       	push	r2
 10a:	3f 92       	push	r3
 10c:	4f 92       	push	r4
 10e:	5f 92       	push	r5
 110:	6f 92       	push	r6
 112:	7f 92       	push	r7
 114:	8f 92       	push	r8
 116:	9f 92       	push	r9
 118:	af 92       	push	r10
 11a:	bf 92       	push	r11
 11c:	cf 92       	push	r12
 11e:	df 92       	push	r13
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	2c 97       	sbiw	r28, 0x0c	; 12
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
	   DDRC=0xff;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	84 bb       	out	0x14, r24	; 20
	   DDRA=0xff;
 140:	8a bb       	out	0x1a, r24	; 26
	   DDRD=0x07;
 142:	87 e0       	ldi	r24, 0x07	; 7
 144:	81 bb       	out	0x11, r24	; 17
	   
	    init();
 146:	0e 94 6b 00 	call	0xd6	; 0xd6 <init>
		cmd(0x82);
 14a:	82 e8       	ldi	r24, 0x82	; 130
 14c:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
		str("DOOR LOCK");
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 75 00 	call	0xea	; 0xea <str>
		cmd(0xc1);
 158:	81 ec       	ldi	r24, 0xC1	; 193
 15a:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
		str("BASED SYSTEM");
 15e:	8a e6       	ldi	r24, 0x6A	; 106
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 75 00 	call	0xea	; 0xea <str>
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	99 e6       	ldi	r25, 0x69	; 105
 16a:	a8 e1       	ldi	r26, 0x18	; 24
 16c:	81 50       	subi	r24, 0x01	; 1
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	a0 40       	sbci	r26, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x64>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x6e>
 176:	00 00       	nop
		_delay_ms(1000);
		cmd(0x01); 
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
	    cmd(0x81);
 17e:	81 e8       	ldi	r24, 0x81	; 129
 180:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
	   str("ENTER THE ");
 184:	87 e7       	ldi	r24, 0x77	; 119
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 75 00 	call	0xea	; 0xea <str>
	   cmd(0xc1);
 18c:	81 ec       	ldi	r24, 0xC1	; 193
 18e:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
	   str("PASSWORD");
 192:	82 e8       	ldi	r24, 0x82	; 130
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 75 00 	call	0xea	; 0xea <str>
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	94 e3       	ldi	r25, 0x34	; 52
 19e:	ac e0       	ldi	r26, 0x0C	; 12
 1a0:	81 50       	subi	r24, 0x01	; 1
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	a0 40       	sbci	r26, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x98>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0xa2>
 1aa:	00 00       	nop
	   _delay_ms(500);
	   cmd(0x01);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
	   
	   
	   unsigned char pass[5]={"1234"};
 1b2:	de 01       	movw	r26, r28
 1b4:	11 96       	adiw	r26, 0x01	; 1
 1b6:	e2 ed       	ldi	r30, 0xD2	; 210
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	01 90       	ld	r0, Z+
 1be:	0d 92       	st	X+, r0
 1c0:	81 50       	subi	r24, 0x01	; 1
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0xb4>
 1c4:	0f 2e       	mov	r0, r31
 1c6:	f3 e0       	ldi	r31, 0x03	; 3
 1c8:	6f 2e       	mov	r6, r31
 1ca:	f0 2d       	mov	r31, r0
		{
			int count=0;
			while(count<4)
			{
				
			PORTD=(1<<0);
 1cc:	44 24       	eor	r4, r4
 1ce:	43 94       	inc	r4
				
			}
			else if(PIND&(1<<5))
			{
				data('*');
				en[count]='7';
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f6 e0       	ldi	r31, 0x06	; 6
 1d4:	ef 2e       	mov	r14, r31
 1d6:	ff 24       	eor	r15, r15
 1d8:	f0 2d       	mov	r31, r0
 1da:	ec 0e       	add	r14, r28
 1dc:	fd 1e       	adc	r15, r29
				
			PORTD=(1<<0);
			if(PIND&(1<<3))
			{
				data('*');
				en[count]='1';
 1de:	0f 2e       	mov	r0, r31
 1e0:	f1 e3       	ldi	r31, 0x31	; 49
 1e2:	5f 2e       	mov	r5, r31
 1e4:	f0 2d       	mov	r31, r0
		{
			int count=0;
			while(count<4)
			{
				
			PORTD=(1<<0);
 1e6:	b4 2c       	mov	r11, r4
				
			}
			else if(PIND&(1<<5))
			{
				data('*');
				en[count]='7';
 1e8:	eb 86       	std	Y+11, r14	; 0x0b
 1ea:	fc 86       	std	Y+12, r15	; 0x0c
 1ec:	cd c0       	rjmp	.+410    	; 0x388 <main+0x280>
		{
			int count=0;
			while(count<4)
			{
				
			PORTD=(1<<0);
 1ee:	b2 ba       	out	0x12, r11	; 18
			if(PIND&(1<<3))
 1f0:	83 9b       	sbis	0x10, 3	; 16
 1f2:	0a c0       	rjmp	.+20     	; 0x208 <main+0x100>
			{
				data('*');
 1f4:	8a e2       	ldi	r24, 0x2A	; 42
 1f6:	0e 94 5a 00 	call	0xb4	; 0xb4 <data>
				en[count]='1';
 1fa:	f7 01       	movw	r30, r14
 1fc:	e0 0f       	add	r30, r16
 1fe:	f1 1f       	adc	r31, r17
 200:	50 82       	st	Z, r5
				count++;
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	19 c0       	rjmp	.+50     	; 0x23a <main+0x132>
					
				
			}
			else if(PIND&(1<<4))
 208:	84 9b       	sbis	0x10, 4	; 16
 20a:	0b c0       	rjmp	.+22     	; 0x222 <main+0x11a>
			{
				data('*');
 20c:	8a e2       	ldi	r24, 0x2A	; 42
 20e:	0e 94 5a 00 	call	0xb4	; 0xb4 <data>
				en[count]='4';
 212:	f7 01       	movw	r30, r14
 214:	e0 0f       	add	r30, r16
 216:	f1 1f       	adc	r31, r17
 218:	94 e3       	ldi	r25, 0x34	; 52
 21a:	90 83       	st	Z, r25
				count++;
 21c:	0f 5f       	subi	r16, 0xFF	; 255
 21e:	1f 4f       	sbci	r17, 0xFF	; 255
 220:	0c c0       	rjmp	.+24     	; 0x23a <main+0x132>
				
			}
			else if(PIND&(1<<5))
 222:	85 9b       	sbis	0x10, 5	; 16
 224:	0a c0       	rjmp	.+20     	; 0x23a <main+0x132>
			{
				data('*');
 226:	8a e2       	ldi	r24, 0x2A	; 42
 228:	0e 94 5a 00 	call	0xb4	; 0xb4 <data>
				en[count]='7';
 22c:	f7 01       	movw	r30, r14
 22e:	e0 0f       	add	r30, r16
 230:	f1 1f       	adc	r31, r17
 232:	a7 e3       	ldi	r26, 0x37	; 55
 234:	a0 83       	st	Z, r26
				count++;
 236:	0f 5f       	subi	r16, 0xFF	; 255
 238:	1f 4f       	sbci	r17, 0xFF	; 255
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	90 e7       	ldi	r25, 0x70	; 112
 23e:	a2 e0       	ldi	r26, 0x02	; 2
 240:	81 50       	subi	r24, 0x01	; 1
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	a0 40       	sbci	r26, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x138>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x142>
 24a:	00 00       	nop
			}
			_delay_ms(100);
			
			PORTD=(1<<1);
 24c:	d2 ba       	out	0x12, r13	; 18
			if(PIND&(1<<3))
 24e:	83 9b       	sbis	0x10, 3	; 16
 250:	0a c0       	rjmp	.+20     	; 0x266 <main+0x15e>
			{			
				data('*');
 252:	8a e2       	ldi	r24, 0x2A	; 42
 254:	0e 94 5a 00 	call	0xb4	; 0xb4 <data>
				en[count]='2';
 258:	f7 01       	movw	r30, r14
 25a:	e0 0f       	add	r30, r16
 25c:	f1 1f       	adc	r31, r17
 25e:	a0 82       	st	Z, r10
				count++;
 260:	0f 5f       	subi	r16, 0xFF	; 255
 262:	1f 4f       	sbci	r17, 0xFF	; 255
 264:	17 c0       	rjmp	.+46     	; 0x294 <main+0x18c>
				
			}
			else if(PIND&(1<<4))
 266:	84 9b       	sbis	0x10, 4	; 16
 268:	0a c0       	rjmp	.+20     	; 0x27e <main+0x176>
			{
				data('*');
 26a:	8a e2       	ldi	r24, 0x2A	; 42
 26c:	0e 94 5a 00 	call	0xb4	; 0xb4 <data>
				en[count]='5';
 270:	f7 01       	movw	r30, r14
 272:	e0 0f       	add	r30, r16
 274:	f1 1f       	adc	r31, r17
 276:	80 82       	st	Z, r8
				count++;
 278:	0f 5f       	subi	r16, 0xFF	; 255
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
 27c:	0b c0       	rjmp	.+22     	; 0x294 <main+0x18c>
				
			}
			else if(PIND&(1<<5))
 27e:	85 9b       	sbis	0x10, 5	; 16
 280:	09 c0       	rjmp	.+18     	; 0x294 <main+0x18c>
			{
				data('*');
 282:	8a e2       	ldi	r24, 0x2A	; 42
 284:	0e 94 5a 00 	call	0xb4	; 0xb4 <data>
				en[count]='8';
 288:	f7 01       	movw	r30, r14
 28a:	e0 0f       	add	r30, r16
 28c:	f1 1f       	adc	r31, r17
 28e:	30 82       	st	Z, r3
				count++;
 290:	0f 5f       	subi	r16, 0xFF	; 255
 292:	1f 4f       	sbci	r17, 0xFF	; 255
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	90 e7       	ldi	r25, 0x70	; 112
 298:	a2 e0       	ldi	r26, 0x02	; 2
 29a:	81 50       	subi	r24, 0x01	; 1
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	a0 40       	sbci	r26, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x192>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x19c>
 2a4:	00 00       	nop
			}
			_delay_ms(100);
			
			PORTD=(1<<2);
 2a6:	c2 ba       	out	0x12, r12	; 18
			if(PIND&(1<<3))
 2a8:	83 9b       	sbis	0x10, 3	; 16
 2aa:	0a c0       	rjmp	.+20     	; 0x2c0 <main+0x1b8>
			{
				data('*');
 2ac:	8a e2       	ldi	r24, 0x2A	; 42
 2ae:	0e 94 5a 00 	call	0xb4	; 0xb4 <data>
				en[count]='3';
 2b2:	f7 01       	movw	r30, r14
 2b4:	e0 0f       	add	r30, r16
 2b6:	f1 1f       	adc	r31, r17
 2b8:	90 82       	st	Z, r9
				count++;
 2ba:	0f 5f       	subi	r16, 0xFF	; 255
 2bc:	1f 4f       	sbci	r17, 0xFF	; 255
 2be:	17 c0       	rjmp	.+46     	; 0x2ee <main+0x1e6>
				
			}
			else if(PIND&(1<<4))
 2c0:	84 9b       	sbis	0x10, 4	; 16
 2c2:	0a c0       	rjmp	.+20     	; 0x2d8 <main+0x1d0>
			{
				data('*');
 2c4:	8a e2       	ldi	r24, 0x2A	; 42
 2c6:	0e 94 5a 00 	call	0xb4	; 0xb4 <data>
				en[count]='6';
 2ca:	f7 01       	movw	r30, r14
 2cc:	e0 0f       	add	r30, r16
 2ce:	f1 1f       	adc	r31, r17
 2d0:	70 82       	st	Z, r7
				count++;
 2d2:	0f 5f       	subi	r16, 0xFF	; 255
 2d4:	1f 4f       	sbci	r17, 0xFF	; 255
 2d6:	0b c0       	rjmp	.+22     	; 0x2ee <main+0x1e6>
			}
			else if(PIND&(1<<5))
 2d8:	85 9b       	sbis	0x10, 5	; 16
 2da:	09 c0       	rjmp	.+18     	; 0x2ee <main+0x1e6>
			{
				data('*');
 2dc:	8a e2       	ldi	r24, 0x2A	; 42
 2de:	0e 94 5a 00 	call	0xb4	; 0xb4 <data>
				en[count]='9';
 2e2:	f7 01       	movw	r30, r14
 2e4:	e0 0f       	add	r30, r16
 2e6:	f1 1f       	adc	r31, r17
 2e8:	20 82       	st	Z, r2
				count++;
 2ea:	0f 5f       	subi	r16, 0xFF	; 255
 2ec:	1f 4f       	sbci	r17, 0xFF	; 255
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	90 e7       	ldi	r25, 0x70	; 112
 2f2:	a2 e0       	ldi	r26, 0x02	; 2
 2f4:	81 50       	subi	r24, 0x01	; 1
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	a0 40       	sbci	r26, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x1ec>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x1f6>
 2fe:	00 00       	nop
	   
	   unsigned char no=0;
		while(no<3)
		{
			int count=0;
			while(count<4)
 300:	04 30       	cpi	r16, 0x04	; 4
 302:	11 05       	cpc	r17, r1
 304:	0c f4       	brge	.+2      	; 0x308 <main+0x200>
 306:	73 cf       	rjmp	.-282    	; 0x1ee <main+0xe6>
			}
			_delay_ms(100);
			
			
			}	
			cmd(0x01);			
 308:	84 2d       	mov	r24, r4
 30a:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
			
			if(!strcmp(pass,en))
 30e:	ce 01       	movw	r24, r28
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	6b 85       	ldd	r22, Y+11	; 0x0b
 314:	7c 85       	ldd	r23, Y+12	; 0x0c
 316:	0e 94 1c 02 	call	0x438	; 0x438 <strcmp>
 31a:	28 2f       	mov	r18, r24
 31c:	39 2f       	mov	r19, r25
 31e:	21 15       	cp	r18, r1
 320:	31 05       	cpc	r19, r1
 322:	81 f4       	brne	.+32     	; 0x344 <main+0x23c>
			{
				str("correct password") ;
 324:	8b e8       	ldi	r24, 0x8B	; 139
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 75 00 	call	0xea	; 0xea <str>
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	94 e3       	ldi	r25, 0x34	; 52
 330:	ac e0       	ldi	r26, 0x0C	; 12
 332:	81 50       	subi	r24, 0x01	; 1
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	a0 40       	sbci	r26, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x22a>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x234>
 33c:	00 00       	nop
				_delay_ms(500);
				
				PORTA=0x0A;
 33e:	8a e0       	ldi	r24, 0x0A	; 10
 340:	8b bb       	out	0x1b, r24	; 27
 342:	1d c0       	rjmp	.+58     	; 0x37e <main+0x276>
				
				
			}
			else
			{
				str("WRONG PASSWORD");
 344:	8c e9       	ldi	r24, 0x9C	; 156
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 75 00 	call	0xea	; 0xea <str>
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	93 ec       	ldi	r25, 0xC3	; 195
 350:	a9 e0       	ldi	r26, 0x09	; 9
 352:	81 50       	subi	r24, 0x01	; 1
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	a0 40       	sbci	r26, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x24a>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x254>
 35c:	00 00       	nop
				_delay_ms(400);
				cmd(0x01);
 35e:	84 2d       	mov	r24, r4
 360:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
				str("rewrite password");
 364:	8b ea       	ldi	r24, 0xAB	; 171
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 75 00 	call	0xea	; 0xea <str>
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	93 ec       	ldi	r25, 0xC3	; 195
 370:	a9 e0       	ldi	r26, 0x09	; 9
 372:	81 50       	subi	r24, 0x01	; 1
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	a0 40       	sbci	r26, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x26a>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x274>
 37c:	00 00       	nop
				_delay_ms(400);
				
			}
			cmd(0x01);
 37e:	84 2d       	mov	r24, r4
 380:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
 384:	6a 94       	dec	r6
	   
	   unsigned char pass[5]={"1234"};
	   unsigned char en[5];
	   
	   unsigned char no=0;
		while(no<3)
 386:	09 f1       	breq	.+66     	; 0x3ca <main+0x2c2>
		  data(*ptr++);   
	   
   }
   
   int main(void)
   {
 388:	00 e0       	ldi	r16, 0x00	; 0
 38a:	10 e0       	ldi	r17, 0x00	; 0
				en[count]='7';
				count++;
			}
			_delay_ms(100);
			
			PORTD=(1<<1);
 38c:	dd 24       	eor	r13, r13
 38e:	68 94       	set
 390:	d1 f8       	bld	r13, 1
				
			}
			else if(PIND&(1<<5))
			{
				data('*');
				en[count]='8';
 392:	0f 2e       	mov	r0, r31
 394:	f8 e3       	ldi	r31, 0x38	; 56
 396:	3f 2e       	mov	r3, r31
 398:	f0 2d       	mov	r31, r0
				
			}
			else if(PIND&(1<<4))
			{
				data('*');
				en[count]='5';
 39a:	0f 2e       	mov	r0, r31
 39c:	f5 e3       	ldi	r31, 0x35	; 53
 39e:	8f 2e       	mov	r8, r31
 3a0:	f0 2d       	mov	r31, r0
			
			PORTD=(1<<1);
			if(PIND&(1<<3))
			{			
				data('*');
				en[count]='2';
 3a2:	0f 2e       	mov	r0, r31
 3a4:	f2 e3       	ldi	r31, 0x32	; 50
 3a6:	af 2e       	mov	r10, r31
 3a8:	f0 2d       	mov	r31, r0
				en[count]='8';
				count++;
			}
			_delay_ms(100);
			
			PORTD=(1<<2);
 3aa:	cc 24       	eor	r12, r12
 3ac:	68 94       	set
 3ae:	c2 f8       	bld	r12, 2
				count++;
			}
			else if(PIND&(1<<5))
			{
				data('*');
				en[count]='9';
 3b0:	0f 2e       	mov	r0, r31
 3b2:	f9 e3       	ldi	r31, 0x39	; 57
 3b4:	2f 2e       	mov	r2, r31
 3b6:	f0 2d       	mov	r31, r0
				
			}
			else if(PIND&(1<<4))
			{
				data('*');
				en[count]='6';
 3b8:	0f 2e       	mov	r0, r31
 3ba:	f6 e3       	ldi	r31, 0x36	; 54
 3bc:	7f 2e       	mov	r7, r31
 3be:	f0 2d       	mov	r31, r0
			
			PORTD=(1<<2);
			if(PIND&(1<<3))
			{
				data('*');
				en[count]='3';
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f3 e3       	ldi	r31, 0x33	; 51
 3c4:	9f 2e       	mov	r9, r31
 3c6:	f0 2d       	mov	r31, r0
 3c8:	12 cf       	rjmp	.-476    	; 0x1ee <main+0xe6>
			}
			cmd(0x01);
			no++;
			
			}
			init();
 3ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <init>
			cmd(0x82);
 3ce:	82 e8       	ldi	r24, 0x82	; 130
 3d0:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
			str("retry after");
 3d4:	8c eb       	ldi	r24, 0xBC	; 188
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 75 00 	call	0xea	; 0xea <str>
			cmd(0xc2);
 3dc:	82 ec       	ldi	r24, 0xC2	; 194
 3de:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
			str("some time");
 3e2:	88 ec       	ldi	r24, 0xC8	; 200
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 75 00 	call	0xea	; 0xea <str>
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	99 e6       	ldi	r25, 0x69	; 105
 3ee:	a8 e1       	ldi	r26, 0x18	; 24
 3f0:	81 50       	subi	r24, 0x01	; 1
 3f2:	90 40       	sbci	r25, 0x00	; 0
 3f4:	a0 40       	sbci	r26, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <main+0x2e8>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <main+0x2f2>
 3fa:	00 00       	nop
			_delay_ms(1000);
			cmd(0x01);			
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 49 00 	call	0x92	; 0x92 <cmd>
		}			
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	2c 96       	adiw	r28, 0x0c	; 12
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	df 90       	pop	r13
 420:	cf 90       	pop	r12
 422:	bf 90       	pop	r11
 424:	af 90       	pop	r10
 426:	9f 90       	pop	r9
 428:	8f 90       	pop	r8
 42a:	7f 90       	pop	r7
 42c:	6f 90       	pop	r6
 42e:	5f 90       	pop	r5
 430:	4f 90       	pop	r4
 432:	3f 90       	pop	r3
 434:	2f 90       	pop	r2
 436:	08 95       	ret

00000438 <strcmp>:
 438:	fb 01       	movw	r30, r22
 43a:	dc 01       	movw	r26, r24
 43c:	8d 91       	ld	r24, X+
 43e:	01 90       	ld	r0, Z+
 440:	80 19       	sub	r24, r0
 442:	01 10       	cpse	r0, r1
 444:	d9 f3       	breq	.-10     	; 0x43c <strcmp+0x4>
 446:	99 0b       	sbc	r25, r25
 448:	08 95       	ret

0000044a <_exit>:
 44a:	f8 94       	cli

0000044c <__stop_program>:
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__stop_program>
